* Additions after the playtesting
- Arrow keys for inputs
- More introductory levels for unfolding
- Added better understandable finish tiles
- Improved instruction overlays
{{{insertImage(final_release/menu2.png, ,width:50%)}}}
* Latest additions to render pipeline
- Important graphical aspects had to be added
- Levels designed with assets that make use of improved graphics
{{{insertImage(final_release/level2.png, ,width:50%)}}}
** MSAA
- Number of samples is extracted from GPU properties
- Create new buffer storing samples
- Buffer then used in the pipeline
{{{insertImage(final_release/msaa.png, ,width:50%)}}}
** Mipmapping
- Number of mip levels is obtained from the dimensions of texture images
- Vulkan fills mip levels with different resolutions of textures
{{{insertImage(final_release/mipmap.png, ,width:50%)}}}
** Shadows
- Very important aspect for realism
- Shadow mapping: Pipeline needs additional render target
- Overlay to adjust light attributes
{{{insertImage(final_release/Light_controls.png, ,width:40%)}}}
** Shadow mapping enhancements
- Adjusting FoV of the light to the visible scene
- Resolution of shadow map only used for visible area
- Crisper shadows
{{{insertImage(final_release/Light_FoV.png, ,width:50%)}}}
** Shadow mapping enhancements
- Exact depth information
- Float imprecision
- Near and far plane adjustable for each level
{{{insertImage(final_release/Shadow_float_imprecision.png, ,width:40%)}}}
** Shadow mapping enhancements
- Shadow color is the sky color for more realism
- Shadowmap sampled 5x5 around pixel: PCF
- PCF results in a float that is interpolated
{{{insertImage(final_release/PCF.png, ,width:50%)}}}
* Exporting blender scene
- Designing scenes in engine was deemed not feasible
- Solution: design scenes in blender and export to engine representation
- Set of assets that was agreed upon beforehand
{{{insertImage(final_release/blender_main_menu.png, ,width:40%)}}}
** Export Script
- Iterate over all objects in the blender scene
- Adjust names of objects to create mesh & mat names
#+BEGIN_SRC python
  outfile.write(f"""
        {{
            .mesh = {mesh_name},
            .material  = {mat_name},
            .transform {{
                .position    =
                    glm::vec3{{ {pos_x}f, {pos_y}f, {pos_z}f }},
                .orientation =
                    get_quat_from_XYZ({rot_x}f, {rot_y}f, {rot_z}f),
                .scale       =
                    glm::vec3{{ {scale_x}f,{scale_y}f,{scale_z}f }},
            }}
        }},""")
#+END_SRC
* Gamestate & continue
- Pressing Esc opens the main menu level
- Continue tile -> current level, position, orientation
{{{insertImage(final_release/menu2.png, ,width:70%)}}}
* Animation System
- Deterministic procedural animations
- With the help of the scheduler/agenda:
  - Ability to animate any variable
  - Ability to schedule any piece of code to
    run at any given time later

- Usually not seen in games (to our knowledge)
- Major technical archievement of the project

** Scheduler Iterface
#+begin_src c++
auto schedule_animation(Scheduled_Animation_Create_Info aci)
    -> Scheduled_Animation*;
auto schedule_action(Scheduled_Action_Create_Info aci)
    -> Scheduled_Action*;

auto chain_action(Scheduled_Animation* existing_animation,
                  Action_Create_Info aci)
    -> Action*;
auto chain_action(Action* existing_action,
                  Action_Create_Info aci)
    -> Action*;

auto update_all(f32 delta_time) -> void;
auto reset() -> void;
#+end_src

** Scheduler - update_all
#+begin_src c++
auto update_all(f32 delta_time) -> void;
#+end_src
- In the end, all logic happens here
- Called every frame
  - Updates all active animations
  - Runs due actions

** Scheduler Example - Level finish

#+begin_src c++
Scheduler::schedule_animation({
    .seconds_to_start = 0,
    .seconds_to_end   = 1,
    .interpolant      = &(Active_Scene::camera_fov),
    .interpolant_type = Interpolant_Type::F32,
    .from = &fov_start,
    .to   = &fov_end,
    .interpolation_type = Interpolation_Type::Ease_In,
});
Scheduler::schedule_action({
    .seconds_to_run = 1,
    .action {
        .lambda = load_next_scene,
    }
});
#+end_src

** Scheduler - Complications
Despite the simple interface many things have to be considered

** Scheduler - Complications
*If multiple actions are due, they have to be run in order.*

Because they assume actions scheduled before already ran.

** Scheduler - Complications
*Actions themself might reset the scheduler.* For example =finish_check=.

If reset is called in an action:
 - Don't actually reset the scheduler,
 - do so after the iteration
   - otherwise other actions are not run
 - and also run all other actions that are scheduled

** Scheduler - Complications
*Actions themself might reset the scheduler. And then schedule more things*

#+begin_src c++
auto load_scene(u32 index) -> void {
    Scheduler::reset();

    // schedule intro animation
    Scheduler::schedule_animation({...});
    // chain animation unlock
    Scheduler::chain_action({...});
}
#+end_src

This code by itself is fine, but when run as an action...

** Scheduler - Complications
#+begin_src c++
auto load_scene(u32 index) -> void {      // <<<<
    Scheduler::reset();

    // schedule intro animation
    Scheduler::schedule_animation({...});
    // chain animation unlock
    Scheduler::chain_action({...});
}
#+end_src

| =load_scene=            |
| =Scheduler::update_all= |
| =game_loop=             |

** Scheduler - Complications
#+begin_src c++
auto load_scene(u32 index) -> void {
    Scheduler::reset();                   // <<<<

    // schedule intro animation
    Scheduler::schedule_animation({...});
    // chain animation unlock
    Scheduler::chain_action({...});
}
#+end_src

| =Scheduler::reset=      |
| =load_scene=            |
| =Scheduler::update_all= |
| =game_loop=             |

** Scheduler - Complications
#+begin_src c++
auto load_scene(u32 index) -> void {
    Scheduler::reset();

    // schedule intro animation
    Scheduler::schedule_animation({...});  // <<<<
    // chain animation unlock
    Scheduler::chain_action({...});
}
#+end_src

| =Scheduler::schedule_animation= |
| =load_scene=                    |
| =Scheduler::update_all=         |
| =game_loop=                     |

** Scheduler - Solution

#+begin_src c++
// PING
Bucket_Allocator<Scheduled_Animation> active_animations_1;
Bucket_Allocator<Scheduled_Action>    scheduled_actions_1;
Bucket_Allocator<Action>              chained_actions_1;
// PONG
Bucket_Allocator<Scheduled_Animation> active_animations_2;
Bucket_Allocator<Scheduled_Action>    scheduled_actions_2;
Bucket_Allocator<Action>              chained_actions_2;

Bucket_Allocator<Scheduled_Animation>* active_animations;
Bucket_Allocator<Scheduled_Action>*    scheduled_actions;
Bucket_Allocator<Action>*              chained_actions;

Bucket_Allocator<Scheduled_Animation>* future_active_animations;
Bucket_Allocator<Scheduled_Action>*    future_scheduled_actions;
Bucket_Allocator<Action>*              future_chained_actions;
#+end_src


* Meta Data                                                        :noexport:
#+title: qubi
#+reveal_root: https://cdn.jsdelivr.net/npm/reveal.js

** reveal settings
#+options: toc:nil num:nil ^:nil
#+options: reveal_center:nil
#+reveal_plugins: (notes zoom)
#+reveal_theme: white
#+reveal_extra_css: extrastyle.css
#+reveal_title_slide_background: ../../images/title.png
#+reveal_init_options: slideNumber:"c/t"

** html templates
#+reveal_title_slide:  <br><br><br><br><h1>%t</h1><h4>Felix Brendel<br>Jonas Helms<br>Van Minh Pham</h4>
#+reveal_slide_header: <img class="tumlogo" src="../../images/tum.png"/>
#+reveal_slide_footer: <ul><li>Felix Brendel, Jonas Helms, Van Minh Pham</li><li>Mar.16th.2021</li></ul>

** Macros
#+macro: insertImage #+html: <figure><img style="$3" src="../../images/$1" alt="$1"><figcaption>$2</figcaption></figure>
# usage: insertImage(pathToImage, imageCaption="", style="")
# usage: insertVideo(pathToVid, imageCaption="", width="")
#+macro: insertVideo #+html: <figure><video muted autoplay="true" loop width="$3"><source src="../../videos/$1" type="video/webm"></video><figcaption>$2</figcaption></figure>
