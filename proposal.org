* Game Description

We as the team {{{insert_team_name_here}}} believe that great games build on
simple concepts. A perfect example for such a game is [[https://en.wikipedia.org/wiki/Portal_(video_game)][Portal]] (Valve, 2007). The
game magazine GameStar even ranked it number one on the list of the 250 best pc
games of all time, which they published as the special edition issue 01/2020.

** Game design of Portal

Portal builds on the concept of portals that connect two positions in the game
world. When the players enter one portal, they instantly appear at the location
of the other portal. Using this, the game is divided into levels, each with a
specific starting point and target the players have to reach.

Just this basic concept -- teleporting to another position -- alone however, is
not enough to create an interesting game. Starting from the simple concept one
can begin to shape the game mechanics by exploring different ideas. In the case
of Portal they might have looked like this:

 1. What if the players could place the portals thmeselves?
    - Give the players a portal gun and let them shoot the walls to place
      portals on them
 2. What if there are some surfaces, the players cannot place portals on?
    - If players can place portals everywhere, it might be hard to create
      challenging levels, so also use surfaces, where no portalas can be placed
      on
 3. What if some levels require the players to transport objects in the levels
    to solve them?
    - Let players pick up and carry one object at a time. This also harmonizes
      with the Portal mechanic, as players can carry objects through the
      portal, adding depth to the game design.
 4. What if there are some barriers, that when moved through, destroy the
    carried object?
    - Letting the players carry the objects freely through the level might make
      the levels too easy, but barriers which limit the movment of the objects
      adds depth to the level design

It is interesting to note, that idea 2 and 4 seem to be direct responses to the
ideas 1 and 3.

#+name: fig:design_portal
#+attr_latex: :width 0.6\textwidth
#+caption: The explorative design decisions of the game Portal
[[./images/design_portal.png]]

** Game design of {{{insert_game_name_here}}}

Seeing this we also wanted to design our game in a similar fashion. Our game
concept follows the given theme /wet and slippery/: *The players should slide
around on a slippery floor*[fn:slippery]. This is our main mechanic.


We came to the conclusion that the most fitting gametype for this mechanic would
be a puzzle game where the player controls a simple object. After agreeing upon
this as our starting point we will go over our decision making process for
the rest of the game design in the following section.

[fn:slippery] Of course the word slippery is a bit vague. We thought about what
    it means to us if something is "sippery" or "wet". We came up with these
    simple definitions: Slippery is an attribut of a surface which implies that
    the surface friction is low and the attribute slippery can only be observed
    when another object is touching and sliding on it. "Wet" on the other hand
    is to us the sensation you feel when you touched a liquid. Usually it is
    connected to a reduced surface friction of wet objects.

*** 2D vs 3D

It was clear, that a 3D game would fit better to the setting of this practical
course. However we also really liked the idea of 3D puzzle games as it has the
potential to emerse the player more into the game.

*** What kind of object should the player control?

 - A sphere      :: There are some games that successfully use spheres as the
   player characters, however it seemed that a sphere would not feel like
   slipping on the floor, it would rather be a rolling motion.
 - A cube        :: Could be a good option
 - A tetrahedron :: Could be a good option

Of course, as with Portal, we had to think about explorative questions to
experiment with additional mechanics.

*** What if only part of the floor is slippery?

If there are some sections on the ground that are not slippery, we could make
the cube flip on it's side when reaching a dry section of the map. We can make
this a secondary game mechanic, where the sides of the cubes are different in
some way -- maybe they are colored differently, or have different shapes on
them. An additional condition for finishing a level could then be to match a
specific side of the cube with the target tile. This means that both the route
and the orienation of the cube have to be considered by the player resulting in
another layer of gameplay depth.

*** What if the object could also unfold?

We wanted to add only one more mechanic to our game -- one more action that the
player has, that will let us design more challenging and interesting puzzles.
One of the first ideas we thought about was the objects ability to fold open. By
unfolding the players can bridge slippery tiles or unfold ontu slippery tiles.
By introducing the unfolding, we can also add multiple finish tiles to the
levels, which all have to be satisfied simultaniously by unfolding, for the
level to count as solved.

The two shapes we already considered beforehand, cubes and tetrahedrons, can
unfold onto a two dimensional plane. For a cube the unfolded form would be
located on a regular square grid, while a tetrahedron unfolds to a regular
triangle tiling. For this game we first decided on using the cube as a base
shape, as it allows for a simpler map structure and therefore shallower learning
curve for the player.

A sample unfolding can be seen in Figure [[fig:unfolding_blender]].

#+name: fig:unfolding_blender
#+caption: The unfolding of the cube, following the player's inputs of
#+caption: =up, right, right, up, right=
[[./images/unfolding_blender2.png]]


Note also, that there is inherently a limited amount of valid unfoldings due to
fundamental geometric principless. An illustration of all possible unfoldings
can be seen in Figure [[fig:unfoldings_scheme]]. This is the kind of complexity in a
puzzle game we really want to highlight. Everybody can imagine a cube flipping
over and think about which side will be facing upwards or downwards, but using
this complexity -- which is really accessible to everybody -- we can then design
levels that require the player to plan their movement, flips and unfolds ahead
to finish the level.

#+name: fig:unfoldings_scheme
#+caption: All possible unfoldings of the cube starting on the white side and
#+caption: first unfolding onto the green tile; all other possible onfoldings
#+caption: are permutations of the colors and rotationary symmetries
#+attr_latex: :width 0.4\textwidth
[[./images/unfolding_schemes.png]]

*** Bringing it all together

{{{insert_game_name_here}}} is a tile-based puzzle game, where the players
control a cube and try to make their way to the goal. There are two different
surface categories: slippery and not dry. On slippery sections, the player can
give the cube an impulse in one direction but has to wait as the cube slides
until it hits an obstacle or reaches a dry spot and comes to a hold. While
sliding the cube does not change its orientation. If the cube moves from or to a
dry tile, it flips on its side. This is important because now the cube will have
a different orientation and each level requires the cube to land with the right
side up on the finish tile. As an additional mechanic, the players can unfold
the cube as a method of movement and overcoming otherwise impossible gaps in the
levels.

The first levels will only feature the sliding mechanic as we want to let the
player get used to the fundamentals of the game. And only then we will introduce
dry surfaces and force the player to make smart use of both the sliding and
flipping mechanic. Lastly for the last few levels we will let the player unfold
the cube and open the possibilities for the most strategic use of all three
mechanics. With this approach we hope to archieve a steady learning curve, that
keeps the players motivated.

Compared to the desing decisions of Portal from Figure [[fig:design_portal]], the
tree main design questions for {{{insert_game_name_here}}} can be seen in Figure
[[fig:design_qubi]].

#+name: fig:design_qubi
#+attr_latex: :width 0.6\textwidth
#+caption: The explorative design decisions of {{{insert_game_name_here}}}
[[./images/design_qubi.png]]


#  - player has to set tile types themselves
# - so far no story or context, just fun puzzling for the sake of fun puzzling
#  -> more freedom for ideas, not bound to setting or story
#  -> bigger emphasis on simplicity

** Setting of {{{insert_game_name_here}}}
- {{{insert_game_name_here}}} plays in the nature
- ice, icebergs, water, jungle (?), desert (?)
** Visual Design of {{{insert_game_name_here}}}
The focus of {{{insert_game_name_here}}} is solving puzzles and therefore we try
not to be intrusive with our visual design decisions. To introduce the conrols
of the game, we might only show a picture of the buttons the players can press
to move the cube[fn::controls]. A puzzle should never be hard to solve because
something was hard to see.


[fn:controls] Of course the levels where we show controls will be really easy in
    order to let the player experiment and get a feeling for the movements.

** Audio Design of {{{insert_game_name_here}}}
The gameply of {{{insert_game_name_here}}} will be enriched with a calm
background music that let's the players focus on solving the puzzles. It won't
have a strong rythm or a fast tempo, to not build any pressure on the players
and let them solve the puzzles in their own pace -- the players should feel cozy
when playing the game. We also want to accompany the music with sound effects
for the movements of the cube: sliding, flipping, unfolding, hitting obstacles.
These sound effects should be crisp and convey the nature of the movement.

** Sample levels
The layout of a simple sliding level can be seen in Figure [[fig:level1]]. This is a
rather simple level as it does not leave much room for the players to make
mistakes.

#+name: fig:level1
#+attr_latex: :width 0.6\textwidth
#+caption: Example level that makes use of the sliding mechanic. The red tile
#+caption: marks the start and the green tile the finish. Gray blocks are
#+caption: obstacles. The numbers indicate a possible path the players can
#+caption: take to solve the level.
[[./images/level1.png]]

An example puzzle layout that also makes use of dry tiles can be seen in Figure
[[fig:level2]]. Note that taking different routes on the dry tiles impact the
resulting cube orientation on the finish tile.

#+name: fig:level2
#+attr_latex: :width 0.6\textwidth
#+caption: Example level where the user has to make use of both sliding and
#+caption: and flipping to reach the finish in a certain orientation. If another
#+caption: path is taken, the orientation when landing on the finish will be
#+caption: different.
[[./images/level2.png]]

* Technical Achievement
# detail core technical item (1+)
** Introduction
The central secondary big bullseye idea for our project is to develop our game
idea in our own game engine. Our group always wanted to build their own game
engine from scratch and we thought that this practical provided the perfect
opportunity to put this into reality. The fact that we can use the second
mandatory practical course to further expand on the engine only affirmed this
notion as we are then able to segment the development of the engine over two
semesters and can leave more focus to the development of the game and it's
optimization.

** Motivation
# NOTE(Felix): Ich würde das hier vielleicht nicht "Garbage Collection" nenen,
# weil das inherent etwas behindertes ist. Ich gebe dir recht, dass das was wir
# machen auch eine Art garbage collection ist, aber ich würde gerne nicht das
# schlechte Image, was GC hat, in den Köpfen der Leser erwecken. Vielleicht
# nennen wir das "automatic memory management" oder "automatic resource freeing"
# du hast ja auch schon angesprochen dass resourcen von mehr als einem objekt
# benutzt werden, also (y) -- Felix, 4:39 AM
The main motivation to build our own engine stems from the fact that we believe
that we can then provide better optimization and reduce the overhead for our
games on all levels of the engine, from the graphics pipeline to resource
allocation and garbage collection. Furthermore we believe that building a game
engine from the ground up presents a perfect learning opportunity, especially
when trying to find suitable optimizations that fit our design philosophy.

** Game Engine
In the following sections we will provide a small overview of the components of
the game engine that we want to develop for this semesters project and how we
try to optimize these. Furthermore we will go over the features of the game
engine that we will most likely tackle in the follow-up project and how we solve
the interim solutions for this semesters game.

*** Graphics pipeline
The game engine will use the Vulkan Graphics API to implement a rendering
pipeline. Vulkan is a relatively new API developed by the Khronos Group
(maintainer of OpenGL) with a focus on overhead reduction and was released
in 2016. Vulkan provides a low-level control over the rendering process when
compared to other Graphics APIs and has several advantages that also align with
our overall philosophy in the design of the engine:
- The ability to run on all operating systems and devices
- Explicit control over memory management
- Decreased CPU workload due to reduced driver overhead and batching
- Making use of the driver independent Vulkan Loader to access Vulkan API entry
  points
The Vulkan Loader is responsible for transmitting Vulkan API calls to the
appropriate graphcis driver. This means that we just have to connect to the
Vulkan loader in our engine and do not have to worry about drivers. Furthermore
we can pre-compile our shaders into the SPIR-V binary format instead of
compiling the shaders at runtime. This allows the use of a larger number of
different shaders per scene and reduces application load times. We want to
utilise the ability to use a high amount of different shaders and put this
feature into to Extras for the game development (Layer 5) but we will most
likely first employ this in the follow-up project.
# old::
# The game engine will use the Vulkan Graphics API to implement a rendering
# pipeline. Vulkan is a new API developed by the Khronos Group (maintainer of
# OpenGL) with a focus on overhead reduction and was released in 2016. Using
# Vulkan provides a low-level control over the graphics pipeline when compared to
# other Graphics API's and has several advantages that also align with our overall
# philosophy in the design of the engine:
# - The ability to run on all operating systems and devices
# - Explicit control over memory management
# - Decreased CPU workload due to reduced driver overhead and batching
# - Making use of the driver independent Vulkan Loader to access Vulkan API entry
#   points
# The Vulkan Loader is responsible for transmitting Vulkan API calls to the
# appropriate graphcis driver. This means that we just have to connect to the
# Vulkan loader in our engine and do not have to worry about drivers. Furthermore
# Vulkan pre-compiles shaders into its own binary format called SPIR-V instead of
# compiling the shaders at runtime. This allows the use of a larger number of
# different shaders per scene and reduces application load times. We want to
# utilise the ability to use a high amount of different shaders and put this
# feature into to Extras for the game development(Layer 5) but we will most likely
# first employ this in the follow-up project.

*** Overhead reduction in the engine
The game engine is developed in the C++ language that all of our team members
are familiar with due to our TUM Bachelor courses such as Game Engine Design. We
have also taken further steps into the direction of our core concept of overhead
reduction by omitting the C++ standard library.

*** Resource Loading & Garbage Collection
To increase the performance of the engine we want to make sure that the loading
of resources such as a texture map or a mesh is never done redundantly, which is
likely the case in a puzzle game as key components are similar between different
scenes. In order to implement this we allocate buffers upfront to store all our
resources and a hashmap that maps the file paths of the loaded resources to
their pointers in memory. So if a resource becomes necessary in a scene, we can
cross check whether the file path has already been loaded and then reuse the
already loaded file instead of reloading it. This means that we will only load
the diff between two levels which will reduce load times and create a smoother
game play experience for the player. The Hashmaps also provide further advantage
for the memory management as we can free the memory and GPU memory for the
texture resources by iterating over the hashmap and can incorporate this in the
scene load/unloading process.

# old::
# To increase the performance of the engine we want to make sure that the loading
# of resources such as a texture map or a mesh is never done redundantly, which is
# likely the case in a puzzle game as key components are similar between different
# scenes. In order to implement this we created a hashmap for all loaded files to
# cross check whether the pathfile has already been used and then reuse the
# already loaded file on the GPU. This means that we will only load the diff
# between two levels which will reduce load times and create a smoother game play
# experience for the player. The Hashmaps also provide further advantage for the
# garbage collection as we can free the GPU memory for the texture resources by
# iterating over the hashmap and can incorporate this in the scene load/unloading
# process.

*** Sound System
Sound is very important to our design goal of creating a casual and cozy puzzle
game as we believe that it has a relaxing or even focusing effect on the player.
We will try to implement our own sound system for the engine but are also
considering using an API for example OpenAL if we realize that it would take up
too much time of the development process.

*** Physics System
The current point of view in our team is that we will not implement a physics
engine as part of this semesters project as it would exceed the scope of the
engine building aspect. We will instead use keyframe animations and bake the
limited number of physics interactions directly into the animations or generate
them procedurally. This also comes with the advantage of having a tighter
control over the cube behavior as we want the players to struggle with the
puzzles instead of controls of the cube. Further expanding the engine by
implementing a physics engine is something that may be tackled in the follow up
project.

*** Animation system
The animation system will be a very important part of the engine as it will
substitute our physics interactions and help to increase the graphical fidelity
of the game. Implementation of the animation system will start very early on and
the core functionality of keyframe animation will be finished for the interim
demo.

*** Particle System
A robust particle system would be a nice addition but we currently assume that
we might have to substitute it using keyframe animations aswell. Current status
is that we will develop a particle system if there is time left over after
finishing our High Target goals (Layer 4) of the development.

*** Physically based rendering
One goal of the High Target of our project (Layer 4) is to increase the
graphical fidelity of our game by implementating a physically based rendering
system. The term "physically based renderer" is purpously left ambiguous as we
want to check out how many components of a physically based renderer we can
implement while still keeping a smooth performance on Van Minh "Sepp" Pham's
crappy ass laptop. Using his laptop as a benchmark goal should provide a highly
competetive milestone aswell as a proof of concept to our current investors that
we at {{{insert_team_name_here}}} have the potential to tackle the solution of
world peace and overall global human solidarity.
# nice meme

* Big Idea Bullseye
#+attr_latex: :width 0.5\textwidth
[[./images/bullseye.png]]
* Development Schedule
** Layers of Development
1. Functional Minimum:
   - One basic level(including start and finish tiles)
   - movement of cube
   - slippery floor type
   - Engine Goals: Graphics pipeline, loading meshes, textures, animation system, interface, particle system, tangent space normals
2. Low Target:
   - floors with grip
   - have sides differently colored
   - finish condition: cube must land on a specific side on the finish tile
   - Load Levels from .txt file
3. Desirable Target:
   - cube can be folded open
   - multiple finish tiles
4. High Target:
   - different worlds
   - implementation of physically based rendering
5. Extras:
   - have players set floors to floor types themselves

** Task Distributions
For every milestone we schedule the following:
#+attr_latex: :align |c|c|c|
|-----------------------+--------+-------------|
| Task                  | Member | Spent hours |
|-----------------------+--------+-------------|
| Project documentation | All    |           3 |
|-----------------------+--------+-------------|
| Presentation          | All    |           2 |
|-----------------------+--------+-------------|

In general the tasks are distributed as such:
#+attr_latex: :align |c|l|c|c|
|---------------+----------------------------------+-----------+---------------|
| Components    | Tasks                            | Member(s) | Planned hours |
|---------------+----------------------------------+-----------+---------------|
| Brainstorming |                                  | All       |             3 |
|               |                                  |           |               |
|---------------+----------------------------------+-----------+---------------|
| Prototyping   |                                  | All       |            10 |
|---------------+----------------------------------+-----------+---------------|
| Engine Work   | Implementation of the            | All       |           200 |
|               | 3D graphics engine for           |           |               |
|               | loading meshes, Animation System |           |               |
|               | ...                              |           |               |
|---------------+----------------------------------+-----------+---------------|
| Inputs        | Ensure movement of cube          | Minh      |            20 |
|               | through buttons presses          |           |               |
|---------------+----------------------------------+-----------+---------------|
| Gameplay      | - Cube can be moved              | Minh      |            23 |
|               | - Cube can be folded open        | Felix     |               |
|---------------+----------------------------------+-----------+---------------|
| Win Condition | Cube has to land on finish       | Minh      |            30 |
|               | tile                             | Felix     |               |
|               | - on a specific side             |           |               |
|               | - on multiple finish tiles       |           |               |
|               | at the same time (by folding     |           |               |
|               | open)                            |           |               |
|---------------+----------------------------------+-----------+---------------|
| Level Design  | Designing puzzles,               | Felix     |            40 |
|               | challenges                       | Jonas     |               |
|---------------+----------------------------------+-----------+---------------|
| Animations    | Ensure different movement        | All       |            20 |
|               | behavior on different tiles      |           |               |
|---------------+----------------------------------+-----------+---------------|
| Art           |                                  | Felix     |            60 |
|               | - Environmnet Meshes&Textures    | Jonas     |               |
|               | - Particle effects               |           |               |
|               | - Original music                 |           |               |
|---------------+----------------------------------+-----------+---------------|
| UI            | - Convey basic information       | Jonas     |            10 |
|               | to player                        |           |               |
|               | - Keep it rather simplistic      |           |               |
|---------------+----------------------------------+-----------+---------------|
| Playtesting   | Testing and fixing               | All       |            10 |
|---------------+----------------------------------+-----------+---------------|
| Trailer       |                                  | All       |            30 |
|---------------+----------------------------------+-----------+---------------|
| Additional    | - Different world designs        | All       | leftover time |
| Content       | - Players setting floors to      |           |               |
|               | specific type themselves         |           |               |
|               | ...                              |           |               |
|---------------+----------------------------------+-----------+---------------|


The exact timeline can be observed in timeline.pdf (which will be updated regularly)
# \begin{figure}[H] \centering{
# \includegraphics[width=\textwidth]{timeline.pdf}}
# \end{figure}
* Assessment
# main strength, target audience, world view for design, criteria for success

{{{insert_game_name_here}}} is designed to be a cozy and fun puzzle game for people to enjoy
regardless of prior experiences of puzzle games or even video games in general.
To achieve that, the game will have to be easily accessible not requiring a lot
of prior knowledge. Later levels will add more and more mechanics effectively
raising the difficulty level which hopefully will keep players invested. The
difficulty curve in form of the levels provides one of the biggest challenges in
the development as a sudden difficulty spike can lead to a lot of frustration
while low curve may bore players.

Although we intend to provide players with healthy challenges along the levels,
we generally want {{{insert_game_name_here}}} to be a relaxing game to be played
from time to time.

# Notes:
# - all about simplicity, no bombast
# - easy accessibility
# - just fun & cozy puzzle people can play from time to time
# - we hope for people to calm down when figuring out solutions for trickier levels

* Meta Info :noexport:
#+options: html-postamble:nil toc:nil title:nil
#+macro: insert_game_name_here qubie or quboi
#+macro: insert_team_name_here FünfKopf

#+author: Felix Brendel, Jonas Helms, Van Minh Pham
#+title: Game Idea Proposal: {{{insert_game_name_here}}}

#+latex_header: \input{latex.tex}
