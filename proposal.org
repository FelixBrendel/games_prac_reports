#+macro: insert_game_name_here qubie or quboi
#+macro: insert_team_name_here funfKÃ¶pp
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_HEADER: \usepackage{titling}
#+title: Game Idea Proposal: {{{insert_game_name_here}}}
#+author: Felix Brendel, Jonas Helms, Van Minh Pham
#+latex_header: \renewcommand{\familydefault}{\sfdefault}

#+begin_export latex
\begin{titlepage}
\begin{center}
\vspace*{2 cm}
\huge
\textbf{\thetitle}

\vspace{1cm}
\Large
Team \textit{5Kopf}:

\vspace{0.2cm}
Felix Brendel \\ Jonas Helms \\ Van Minh Pham

\vspace{2cm}
\large
November 2020

\end{center}
\end{titlepage}

\clearpage
\tableofcontents
\clearpage
#+end_export


* Game Description
# overview of game, overall gameplay
# include background or storyline associated with the game
# ~2-3 pages of text
# ~3 pages of mocked-up screenshots and/or sketches (pencil sketches are fine)
# highlight relation of theme (wet & slippery)
# justify every decision

Notes:
- {{{insert_game_name_here}}} is a tile-based puzzle game
- in each level the player moves a cube from start tile to finish tile
- multiple floor-types:
  - slippery floor:
    - cube cannot change moving direction after button input until obstacle is hit
    - cube does not change the orientation of the cube
  - floors with grip:
    - on one button press cube moves only once
    - cube turns with each movement
- add mechanics every few levels -> steady learning curve:
  - cube is colored differently on every side
  - cube needs to be in a specific orientation on the finish tile
  - cube can be folded open:
    - bridge slippery tiles
    - multiple finish tiles one which all cube sides have to be in the end
  - player has to set tile types themselves
- so far no story or context, just fun puzzling for the sake of fun puzzling
  -> more freedom for ideas, not bound to setting or story
  -> bigger emphasis on simplicity

* Technical Achievement
# detail core technical item (1+)
As part of the development of {{{insert_game_name_here}}} our group will develop
our own Game Engine. The game engine will use the Vulkan Graphics API to
implement a rendering pipeline. Vulkan is a new API developed by the Khronos
Group (maintainer of OpenGL) with a focus on overhead reduction and was released
in 2016. Using Vulkan has several advantages such as the ability to run on all
operating systems and devices, explicit control over memory management and a
decreased CPU workload due to reduced driver overhead and batching. Furthermore
Vulkan pre-compiles shaders into its own binary format called SPIR-V instead of
compiling the shaders at runtime. This allows the use of a larger number of
different shaders per scene and reduces application load times. The decision to
use the Vulkan API was made due the general design goal of the Game Engine which
is to keep the overhead minimal and thus increase the perfomance. Other design
decisions that were made for the development of the engine is the omission of
the C++ standard library and using the Vulkan loader to assign the function
pointers after compiling instead of linking. The first steps for the engine
implementation after the graphics pipeline will be the handling of the memory
allocation and mesh/texture loading. After that we want to implement an
animation system and a very basic interface. As one of the last parts of the
engine we want to implement a physically based rendering system and make use of
some of the perfomance we have saved in the first place.


Notes:
- Vulkan
- Parts of the engine: animation, particle, TheBrendeLoader
- (procedural levels)
- physically based rendering
- make extensive use of different vertex-shaders
- very minimalistic and pure, just like God's own Game Engine
- no c++ standard library
- no bloat allowed
* Big Idea Bullseye
[insert bullseye image]
* Development Schedule

*Layers of Development*:
1. Functional Minimum:
   - One basic level(including start and finish tiles)
   - movement of cube
   - slippery floor type
   - Engine Goals: Graphics pipeline, loading meshes, textures, animation system, interface, particle system, tangent space normals
2. Low Target:
   - floors with grip
   - have sides differently colored
   - finish condition: cube must land on a specific side on the finish tile
   - Load Levels from .txt file
3. Desirable Target:
   - cube can be folded open
   - multiple finish tiles
4. High Target:
   - different worlds
   - implementation of physically based rendering
5. Extras:
   - have players set floors to floor types themselves

*Timeline*: Excel Sheet?

** Task Distributions
For every milestone we schedule the following:
#+attr_latex: :align |c|c|c|
|-----------------------+--------+-------------|
| Task                  | Member | Spent hours |
|-----------------------+--------+-------------|
| Project documentation | All    |           3 |
|-----------------------+--------+-------------|
| Presentation          | All    |           2 |
|-----------------------+--------+-------------|

In general:
#+attr_latex: :align |c|l|c|c|
|---------------+-------------------------------+-----------+---------------|
| Category      | Tasks                         | Member(s) | Planned hours |
|---------------+-------------------------------+-----------+---------------|
| Brainstorming |                               | All       |             3 |
|---------------+-------------------------------+-----------+---------------|
| Engine Work   | Implementation of the         | All       |           200 |
|               | 3D graphics engine for        |           |               |
|               | loading meshes, animations    |           |               |
|               | ...                           |           |               |
|---------------+-------------------------------+-----------+---------------|
| Inputs        | Ensure movement of cube       | Minh      |            15 |
|               | through buttons presses       |           |               |
|---------------+-------------------------------+-----------+---------------|
| Gameplay      | - Cube can be moved           | Minh      |            25 |
|               | - Cube can be folded open     | Felix     |               |
|---------------+-------------------------------+-----------+---------------|
| Win Condition | Cube has to land on finish    | Minh      |            30 |
|               | tile                          | Felix     |               |
|               | + on a specific side          |           |               |
|               | + on multiple finish tiles    |           |               |
|               | at the same time (by folding  |           |               |
|               | open)                         |           |               |
|---------------+-------------------------------+-----------+---------------|
| Level Design  | Designing puzzles,            | Felix     |            40 |
|               | challenges                    | Jonas     |               |
|---------------+-------------------------------+-----------+---------------|
| Physics       | Ensure different movement     | All       |            15 |
|               | behavior on different tiles   |           |               |
|---------------+-------------------------------+-----------+---------------|
| Art           | - Create different animations | Felix     |            60 |
|               | for different events          | Jonas     |               |
|               | - Particle effects            |           |               |
|               | - Original music              |           |               |
|---------------+-------------------------------+-----------+---------------|
| UI            | - Convey basic information    | Jonas     |            10 |
|               | to player                     |           |               |
|               | - Keep it rather simplistic   |           |               |
|---------------+-------------------------------+-----------+---------------|
| Playtesting   | Testing and fixing            | All       |            10 |
|---------------+-------------------------------+-----------+---------------|
| Trailer       |                               | All       |            30 |
|---------------+-------------------------------+-----------+---------------|
| Additional    | - Different world designs     | All       | leftover time |
| Content       | - Players setting floors to   |           |               |
|               | specific type themselves      |           |               |
|               | ...                           |           |               |
|---------------+-------------------------------+-----------+---------------|

* Assessment
# main strength, target audience, world view for design, criteria for success

{{{insert_game_name_here}}} is designed to be a cozy and fun puzzle game for people to enjoy
regardless of prior experiences of puzzle games or even video games in general.
To achieve that, the game will have to be easily accessible not requiring a lot
of prior knowledge. Later levels will add more and more mechanics effectively
raising the difficulty level which hopefully will keep players invested. The
difficulty curve in form of the levels provides one of the biggest challenges in
the development as a sudden difficulty spike can lead to a lot of frustration
while low curve may bore players.

Although we intend to provide players with healthy challenges along the levels, 
we generally want {{{insert_game_name_here}}} to be a relaxing game to be played from time to time.

# Notes:
# - all about simplicity, no bombast
# - easy accessibility
# - just fun & cozy puzzle people can play from time to time
# - we hope for people to calm down when figuring out solutions for trickier levels
